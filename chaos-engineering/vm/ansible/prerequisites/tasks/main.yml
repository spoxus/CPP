---
- name: Install apt repositories
  become: true
  apt_repository:
    repo: "{{ item }}"
    state: present
  loop: "{{ apt_repositories }}"

- name: Install grafana's key and apt-repo
  shell: |
    sudo apt-get install -y apt-transport-https
    sudo apt-get install -y software-properties-common wget
    wget -q -O - https://packages.grafana.com/gpg.key | sudo apt-key add -
    sudo add-apt-repository "deb https://packages.grafana.com/oss/deb stable main"

- name: Remove some packages
  become: true
  apt:
    name: "{{ item }}"
    state: absent
    update_cache: yes
  loop: "{{ packages_to_remove }}"

- name: Preinstall packages
  become: true
  apt:
    name: "{{ item }}"
    state: present
    update_cache: yes
  loop: "{{ packages_to_install }}"

- name: Check out the book source code to home
  git:
    repo: 'https://github.com/seeker89/chaos-engineering-in-action.git'
    dest: /home/chaos/src

- name: Make all the examples
  shell: make
  args:
    chdir: /home/chaos/src

- name: Install kind
  shell: |
    curl -Lo ./kind "https://github.com/kubernetes-sigs/kind/releases/download/v0.7.0/kind-$(uname)-amd64"
    chmod +x ./kind
    sudo mv ./kind /usr/bin/kind
    exit 0
  args:
    creates: /usr/bin/kind

- name: Install kubectl
  shell: |
    curl -Lo ./kubectl "https://storage.googleapis.com/kubernetes-release/release/v1.17.0/bin/linux/amd64/kubectl"
    chmod +x ./kubectl
    sudo mv ./kubectl /usr/bin/kubectl
    echo 'source <(kubectl completion bash)' >>~/.bashrc
    echo 'alias k=kubectl' >>~/.bashrc
    echo 'complete -F __start_kubectl k' >>~/.bashrc
    exit 0
  args:
    creates: /usr/bin/kubectl

- name: Install pumba
  shell: |
    curl -Lo ./pumba "https://github.com/alexei-led/pumba/releases/download/0.6.8/pumba_linux_amd64"
    chmod +x ./pumba
    sudo mv ./pumba /usr/bin/pumba
    exit 0
  args:
    creates: /usr/bin/pumba

- name: Allow insecure access to docker socket
  shell: |
    sudo setfacl -m user:$USER:rw /var/run/docker.sock
    sudo usermod -aG docker $USER
    exit 0

# - name: Load kind images onto nodes
#   shell: |
#     kind create cluster
#     kind delete cluster
#     exit 0

- name: Pre-pull some images into docker
  shell: |
    docker pull {{ item }}
  loop: "{{ docker_images_to_pull }}"

- name: Retag some images
  become: true
  shell: |
    docker tag ubuntu:focal-20200423 ubuntu:focal

- name: Disable docker starting on boot
  shell: |
    sudo systemctl disable docker
    sudo systemctl stop docker

  # to avoid surprises, always overcommit the memory
- name: Always overcommit the memory
  become: true
  shell: |
    echo 1 > /proc/sys/vm/overcommit_memory

- name: Prebuild python 3.7 from source with dtrace support
  shell: |
    # install the dependencies
    sudo apt-get install -y build-essential
    sudo apt-get install -y checkinstall
    sudo apt-get install -y libreadline-gplv2-dev
    sudo apt-get install -y libncursesw5-dev
    sudo apt-get install -y libssl-dev
    sudo apt-get install -y libsqlite3-dev
    sudo apt-get install -y tk-dev
    sudo apt-get install -y libgdbm-dev
    sudo apt-get install -y libc6-dev
    sudo apt-get install -y libbz2-dev
    sudo apt-get install -y zlib1g-dev
    sudo apt-get install -y openssl
    sudo apt-get install -y libffi-dev
    sudo apt-get install -y python3-dev
    sudo apt-get install -y python3-setuptools
    sudo apt-get install -y wget
    # download
    cd ~
    curl -o Python-3.7.0.tgz https://www.python.org/ftp/python/3.7.0/Python-3.7.0.tgz
    tar -xzf Python-3.7.0.tgz
    cd Python-3.7.0
    ./configure --with-dtrace --without-tests
    make
    #make test
    sudo make install
    make clean
    ./python --version
    cd ..
    rm Python-3.7.0.tgz

- name: Install pip dependencies
  become: true
  pip:
    name: freegames

# WORDPRESS, APACHE
- name: Create a Wordpress site for apache
  become: true
  template:
    src: wordpress-site
    dest: /etc/apache2/sites-available/wordpress.conf

- name: Create Wordpress DB config
  become: true
  template:
    src: config-localhost.php
    dest: /etc/wordpress/config-localhost.php

- name: Enable the wordpress site in apache
  become: true
  shell: |
    a2ensite wordpress
    service apache2 reload || true

- name: Create the wordpress database
  become: true
  shell: |
    cat <<EOF | sudo mysql -u root
    CREATE DATABASE wordpress;
    CREATE USER 'wordpress'@'localhost' IDENTIFIED BY 'wordpress';
    GRANT SELECT,INSERT,UPDATE,DELETE,CREATE,DROP,ALTER ON wordpress.* TO wordpress@localhost;
    FLUSH PRIVILEGES;
    quit
    EOF

# Stop services from starting on boot time
- name: Disable auto-boot services
  become: true
  service:
    name: "{{ item }}"
    state: stopped
    enabled: false
  loop:
    - apache2
    - nginx
    - mysql

- name: Disable screen locking in gnome
  become: false
  shell: |
    gsettings set org.gnome.desktop.session idle-delay 0

- name: Add auto-login
  become: true
  lineinfile:
    path: /etc/gdm3/custom.conf
    line: "{{ item }}"
    insertafter: "daemon"
  loop:
    - "AutomaticLoginEnable = true"
    - "AutomaticLogin = chaos"

- name: Download and build redis
  shell: |
    wget http://download.redis.io/releases/redis-6.0.5.tar.gz
    tar xzf redis-6.0.5.tar.gz
    cd redis-6.0.5
    make
    sudo mv ./src/redis-server /usr/bin/redis-server
    sudo mv ./src/redis-cli /usr/bin/redis-cli
    cd ..
    rm -rf redis-6.0.5 redis-6.0.5.tar.gz
    exit 0

# https://github.com/sosedoff/pgweb/wiki/Installation#linux
- name: Download and install pgweb
  shell: |
    curl -s https://api.github.com/repos/sosedoff/pgweb/releases/latest \
    | grep linux_amd64.zip \
    | grep download \
    | cut -d '"' -f 4 \
    | wget -qi - \
    && unzip pgweb_linux_amd64.zip \
    && rm pgweb_linux_amd64.zip \
    && sudo mv pgweb_linux_amd64 /usr/local/bin/pgweb

- name: Fill in some data for postgres
  shell: |
    git clone https://github.com/sosedoff/pgweb.git ~/pgweb
    cd ~/pgweb
    git checkout v0.11.6
    sudo -u postgres psql -f ./data/booktown.sql

- name: Create the postgres database
  become: true
  shell: |
    cat <<EOF | sudo -u postgres psql
    CREATE DATABASE chaos;
    CREATE USER chaos WITH ENCRYPTED PASSWORD 'chaos';
    ALTER USER chaos WITH SUPERUSER;
    \q
    EOF

- name: Clean up
  become: true
  shell: |
    rm -rf /home/chaos/.gradle
    apt-get clean
    apt-get autoclean
    apt-get autoremove --purge -y
